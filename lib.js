// Generated by CoffeeScript 1.10.0
(function() {
  var CombinedStream, DEFLATE_END, DeflateCRC32Stream, GZIP_HEADER, _, crcUtils;

  _ = require('lodash');

  crcUtils = require('resin-crc-utils');

  CombinedStream = require('combined-stream');

  DeflateCRC32Stream = require('crc32-stream').DeflateCRC32Stream;

  GZIP_HEADER = new Buffer([0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff]);

  DEFLATE_END = new Buffer([0x03, 0x00]);

  exports.createDeflatePart = function() {
    var buf, compress;
    buf = new Buffer(0);
    compress = new DeflateCRC32Stream();
    compress._push = compress.push;
    compress.push = function(chunk) {
      if (chunk !== null) {
        compress._push(buf);
        return buf = chunk;
      } else {
        if (buf.slice(-2).equals(DEFLATE_END)) {
          buf = buf.slice(0, -2);
        }
        this._push(buf);
        return this._push(null);
      }
    };
    compress._end = compress.end;
    compress.end = function() {
      return this.flush((function(_this) {
        return function() {
          return _this._end();
        };
      })(this));
    };
    compress.metadata = function() {
      return {
        crc: this.digest(),
        len: this.size(),
        zLen: this.size(true)
      };
    };
    return compress;
  };

  exports.createGzipFromParts = function(parts) {
    var i, len, len1, out, stream;
    out = CombinedStream.create();
    out.append(GZIP_HEADER);
    for (i = 0, len1 = parts.length; i < len1; i++) {
      stream = parts[i].stream;
      out.append(stream);
    }
    out.append(DEFLATE_END);
    out.append(crcUtils.crc32_combine_multi(parts).combinedCrc32.slice(0, 4));
    len = new Buffer(4);
    len.writeUInt32LE(_.sum(_.pluck(parts, 'len')), 0);
    out.append(len);
    out.zLen = _.sum(_.pluck(parts, 'zLen')) + 20;
    return out;
  };

}).call(this);
